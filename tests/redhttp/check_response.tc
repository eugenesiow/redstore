/*
    RedHTTP - a lightweight HTTP server library
    Copyright (C) 2010 Nicholas J Humfrey <njh@aelius.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#include "redhttp/redhttp.h"

#suite redhttp_response

#test new_response
redhttp_response_t *response = redhttp_response_new(REDHTTP_OK, NULL);
ck_assert_msg(response != NULL, "redhttp_response_new() returned NULL");
ck_assert(redhttp_response_get_status_code(response) == REDHTTP_OK);
ck_assert_str_eq(redhttp_response_get_status_message(response), "OK");
redhttp_response_free(response);

#test header_add_and_get
redhttp_response_t *response = redhttp_response_new(REDHTTP_OK, NULL);
redhttp_response_add_header(response, "key", "value");
ck_assert_str_eq(redhttp_response_get_header(response, "key"), "value");
redhttp_response_free(response);

#test header_date_add_and_get
redhttp_response_t *response = redhttp_response_new(REDHTTP_OK, NULL);
redhttp_response_add_time_header(response, "Date", 0);
ck_assert_str_eq(redhttp_response_get_header(response, "date"), "Thu, 01 Jan 1970 00:00:00 GMT");
redhttp_response_free(response);

#test append_content
redhttp_response_t *response = redhttp_response_new(REDHTTP_OK, NULL);
ck_assert_msg(response != NULL, "redhttp_response_new() returned NULL");
redhttp_response_content_append(response, "int=%d", 5);
redhttp_response_content_append(response, " str=%s", "hello");
redhttp_response_content_append(response, "");
ck_assert_str_eq(response->content_buffer, "int=5 str=hello");
redhttp_response_free(response);

#test append_long_content
redhttp_response_t *response = redhttp_response_new(REDHTTP_OK, NULL);
int i=0;
ck_assert_msg(response != NULL, "redhttp_response_new() returned NULL");
for(i=0;i<1024;i++) {
    redhttp_response_content_append(response, "0123456789ABCDEF");
}
ck_assert_int_eq(response->content_length,16384);
redhttp_response_free(response);

#test new_with_content
redhttp_response_t *response = redhttp_response_new_with_content("Hello World", 11, "text/plain");
ck_assert_str_eq(redhttp_response_get_status_message(response), "OK");
ck_assert_int_eq(response->content_length,11);
ck_assert_msg(strncmp(response->content_buffer, "Hello World", 11)==0, "Content buffer should contain \"Hello World\"");
ck_assert_str_eq(redhttp_response_get_header(response, "Content-Type"), "text/plain");
redhttp_response_free(response);

#test new_redirect
redhttp_response_t *response = redhttp_response_new_redirect("/foo/bar");
ck_assert_str_eq(redhttp_response_get_status_message(response), "Moved Permanently");
ck_assert_msg(strstr(response->content_buffer,"<h1>301 Moved Permanently</h1>") != NULL, "Page has h1 title");
ck_assert_msg(strstr(response->content_buffer,"<p>The document has moved <a href=\"/foo/bar\">here</a>.</p>") != NULL, "Page has redirect message.");
ck_assert_str_eq(redhttp_response_get_header(response, "Location"), "/foo/bar");
redhttp_response_free(response);

#test new_error_page
redhttp_response_t *response = redhttp_response_new_error_page(REDHTTP_NOT_FOUND, NULL);
ck_assert_str_eq(redhttp_response_get_status_message(response), "Not Found");
ck_assert_msg(response->content_length > 100, "Content length is more than 100 bytes");
ck_assert_msg(strstr(response->content_buffer,"<title>404 Not Found</title>") != NULL, "Page has <title>");
ck_assert_msg(strstr(response->content_buffer,"<h1>404 Not Found</h1>") != NULL, "Page has h1 title");
redhttp_response_free(response);


#test response_send
redhttp_response_t *response = redhttp_response_new_with_content("Hello World", 11, "text/plain");
redhttp_request_t *request = redhttp_request_new_with_args("GET", "/hello", "1.0");
char *buffer = malloc(BUFSIZ);

// Send response
request->server = redhttp_server_new();
request->socket = tmpfile();
redhttp_response_send(response, request);
rewind(request->socket);

// Now read it back in
fgets(buffer, BUFSIZ, request->socket);
ck_assert_str_eq(buffer, "HTTP/1.0 200 OK\r\n");
do {
    fgets(buffer, BUFSIZ, request->socket);
} while (strcmp(buffer, "\r\n"));
fgets(buffer, BUFSIZ, request->socket);
ck_assert_str_eq(buffer, "Hello World");

free(buffer);
redhttp_server_free(request->server);
redhttp_request_free(request);
redhttp_response_free(response);

