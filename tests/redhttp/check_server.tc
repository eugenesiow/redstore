#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#include "redhttp/redhttp.h"

#suite redhttp_server

static redhttp_response_t *handle_ok(redhttp_request_t *request, void *user_data)
{
    return redhttp_response_new(REDHTTP_OK, NULL);
}

#test create_and_free
redhttp_server_t *server = redhttp_server_new();
ck_assert_msg(server != NULL, "redhttp_server_new() returned null");
redhttp_server_free(server);

#test set_and_get_backlog_size
redhttp_server_t *server = redhttp_server_new();
ck_assert_msg(redhttp_server_get_backlog_size(server) > 0, "redhttp_server_get_backlog_size() > 0");
redhttp_server_set_backlog_size(server, 99);
ck_assert_msg(redhttp_server_get_backlog_size(server) == 99, "redhttp_server_get_backlog_size() == 99");
redhttp_server_free(server);

#test set_and_get_signature
redhttp_server_t *server = redhttp_server_new();
redhttp_server_set_signature(server, "foo/bar");
ck_assert_str_eq(redhttp_server_get_signature(server), "foo/bar");
redhttp_server_free(server);

#test set_and_get_null_signature
redhttp_server_t *server = redhttp_server_new();
redhttp_server_set_signature(server, "ignore");
redhttp_server_set_signature(server, NULL);
ck_assert(redhttp_server_get_signature(server) == NULL);
redhttp_server_free(server);

#test dispatch_404
redhttp_server_t *server = redhttp_server_new();
redhttp_request_t *request = redhttp_request_new_with_args("GET", "/foobar", "1.0");
redhttp_response_t *response = redhttp_server_dispatch_request(server, request);
ck_assert(redhttp_response_get_status_code(response) == REDHTTP_NOT_FOUND);
redhttp_response_free(response);
redhttp_request_free(request);
redhttp_server_free(server);

#test dispatch_get
redhttp_server_t *server = redhttp_server_new();
redhttp_request_t *request = redhttp_request_new_with_args("GET", "/hello", "1.0");
redhttp_response_t *response = NULL;
redhttp_server_add_handler(server, "GET", "/hello", handle_ok, NULL);
response = redhttp_server_dispatch_request(server, request);
ck_assert(redhttp_response_get_status_code(response) == REDHTTP_OK);
redhttp_response_free(response);
redhttp_request_free(request);
redhttp_server_free(server);

#test dispatch_head
redhttp_server_t *server = redhttp_server_new();
redhttp_request_t *request = redhttp_request_new_with_args("HEAD", "/hello", "1.0");
redhttp_response_t *response = NULL;
redhttp_server_add_handler(server, "GET", "/hello", handle_ok, NULL);
response = redhttp_server_dispatch_request(server, request);
ck_assert(redhttp_response_get_status_code(response) == REDHTTP_OK);
ck_assert(response->content_length == 0);
redhttp_response_free(response);
redhttp_request_free(request);
redhttp_server_free(server);

#test dispatch_head_404
redhttp_server_t *server = redhttp_server_new();
redhttp_request_t *request = redhttp_request_new_with_args("HEAD", "/hello", "1.0");
redhttp_response_t *response = redhttp_server_dispatch_request(server, request);
ck_assert(redhttp_response_get_status_code(response) == REDHTTP_NOT_FOUND);
ck_assert(response->content_length == 0);
redhttp_response_free(response);
redhttp_request_free(request);
redhttp_server_free(server);

