#include <unistd.h>
#include <stdlib.h>
/*
    RedHTTP - a lightweight HTTP server library
    Copyright (C) 2010 Nicholas J Humfrey <njh@aelius.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "redhttp/redhttp.h"

#suite redhttp_headers

#test count_empty
redhttp_header_t *first = NULL;
ck_assert_int_eq(redhttp_headers_count(&first), 0);
redhttp_headers_free(&first);

#test get_nonexistant
redhttp_header_t *first = NULL;
const char* value = redhttp_headers_get(&first, "a_key");
ck_assert_msg(value == NULL, "redhttp_headers_get() didn't return NULL for nonexistant header");
redhttp_headers_free(&first);

#test add
redhttp_header_t *first = NULL;
redhttp_headers_add(&first, "mykey", "myvalue");
ck_assert_msg(first != NULL, "redhttp_headers_add() didn't create headers");
redhttp_headers_free(&first);

#test add_and_count
redhttp_header_t *first = NULL;
redhttp_headers_add(&first, "key1", "value1");
redhttp_headers_add(&first, "key2", "value2");
redhttp_headers_add(&first, "key3", "value3");
ck_assert_int_eq(redhttp_headers_count(&first), 3);
redhttp_headers_free(&first);

#test add_empty
redhttp_header_t *first = NULL;
redhttp_headers_add(&first, "key1", "value1");
redhttp_headers_add(&first, "key2", "");
ck_assert_int_eq(redhttp_headers_count(&first), 1);
redhttp_headers_free(&first);

#test add_and_get
redhttp_header_t *first = NULL;
redhttp_headers_add(&first, "key1", "value1");
redhttp_headers_add(&first, "key2", "value2");
ck_assert_str_eq(redhttp_headers_get(&first, "key1"), "value1");
ck_assert_str_eq(redhttp_headers_get(&first, "key2"), "value2");
redhttp_headers_free(&first);

#test parse_line
redhttp_header_t *first = NULL;
redhttp_headers_parse_line(&first, "Foo:  bar");
redhttp_headers_parse_line(&first, "");
redhttp_headers_parse_line(&first, "invalid");
redhttp_headers_parse_line(&first, "empty:  ");
redhttp_headers_parse_line(&first, "emptier:");
ck_assert_int_eq(redhttp_headers_count(&first), 1);
ck_assert_str_eq(redhttp_headers_get(&first, "foo"), "bar");
redhttp_headers_free(&first);

#test send_headers
redhttp_header_t *first = NULL;
FILE* file = tmpfile();
char *buffer = malloc(BUFSIZ);
redhttp_headers_parse_line(&first, "key1: value1");
redhttp_headers_parse_line(&first, "key2: value2");
redhttp_headers_send(&first,file);
rewind(file);

// Now read it back in
fgets(buffer, BUFSIZ, file);
ck_assert_str_eq(buffer, "key1: value1\r\n");
fgets(buffer, BUFSIZ, file);
ck_assert_str_eq(buffer, "key2: value2\r\n");

free(buffer);
fclose(file);
redhttp_headers_free(&first);
