/*
    RedHTTP - a lightweight HTTP server library
    Copyright (C) 2010-2011 Nicholas J Humfrey <njh@aelius.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#include "redhttp/redhttp.h"

#suite redhttp_request

#test create_and_free
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_free(request);

#test new_with_args
redhttp_request_t *request = redhttp_request_new_with_args("GET", "/foo%2fbar?rat=white", "1.0");
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
ck_assert_str_eq(redhttp_request_get_url(request), "/foo%2fbar?rat=white");
ck_assert_str_eq(redhttp_request_get_path(request), "/foo/bar");
ck_assert_str_eq(redhttp_request_get_query_string(request), "rat=white");
ck_assert_str_eq(redhttp_request_get_version(request), "1.0");
redhttp_request_free(request);

#test set_and_get_socket
redhttp_request_t *request = redhttp_request_new();
FILE* socket = fopen(FIXTURE_DIR "http_request_crlf.txt", "rb");
redhttp_request_set_socket(request, socket);
ck_assert_msg(redhttp_request_get_socket(request) == socket, "redhttp_request_get_socket() failed");
redhttp_request_free(request);

#test get_host_header
redhttp_request_t *request = redhttp_request_new();
redhttp_request_add_header(request, "Host", "example.com");
ck_assert_str_eq(redhttp_request_get_host(request), "example.com");
redhttp_request_free(request);

#test get_host_server_addr_port_8080
redhttp_request_t *request = redhttp_request_new();
char* server_addr = (char*)redhttp_request_get_server_addr(request);
char* server_port = (char*)redhttp_request_get_server_port(request);
strcpy(server_addr, "127.0.0.1");
strcpy(server_port, "8080");
ck_assert_str_eq(redhttp_request_get_host(request), "127.0.0.1:8080");
redhttp_request_free(request);

#test get_host_server_addr_port_80
redhttp_request_t *request = redhttp_request_new();
char* server_addr = (char*)redhttp_request_get_server_addr(request);
char* server_port = (char*)redhttp_request_get_server_port(request);
strcpy(server_addr, "80.68.95.25");
strcpy(server_port, "80");
ck_assert_str_eq(redhttp_request_get_host(request), "80.68.95.25");
redhttp_request_free(request);

#test set_and_get_method
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_method(request, "geT");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
redhttp_request_free(request);

#test set_and_get_null_method
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_method(request, "ignore");
redhttp_request_set_method(request, NULL);
ck_assert(redhttp_request_get_method(request) == NULL);
redhttp_request_free(request);

#test set_and_get_url
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_url(request, "ignore");
redhttp_request_set_url(request, "/foo/BAR?rat=white");
ck_assert_str_eq(redhttp_request_get_url(request), "/foo/BAR?rat=white");
ck_assert_str_eq(redhttp_request_get_path(request), "/foo/BAR");
ck_assert_str_eq(redhttp_request_get_query_string(request), "rat=white");
redhttp_request_free(request);

#test set_and_get_null_url
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_url(request, "ignore");
redhttp_request_set_url(request, NULL);
ck_assert(redhttp_request_get_url(request) == NULL);
redhttp_request_free(request);

#test set_and_get_full_url
redhttp_request_t *request = redhttp_request_new_with_args("GET", "/path?key=value", "1.0");
redhttp_request_add_header(request, "Host", "example.com");
ck_assert_str_eq(redhttp_request_get_full_url(request), "http://example.com/path?key=value");
redhttp_request_free(request);

#test set_and_get_path
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_path(request, "ignore");
redhttp_request_set_path(request, "/foo/BAR");
ck_assert_str_eq(redhttp_request_get_path(request), "/foo/BAR");
redhttp_request_free(request);

#test set_and_get_null_path
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_path(request, "ignore");
redhttp_request_set_path(request, NULL);
ck_assert(redhttp_request_get_path(request) == NULL);
redhttp_request_free(request);

#test set_and_get_version
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_version(request, "ignore");
redhttp_request_set_version(request, "1.0");
ck_assert_str_eq(redhttp_request_get_version(request), "1.0");
redhttp_request_free(request);

#test set_and_get_null_version
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_version(request, "ignore");
redhttp_request_set_version(request, NULL);
ck_assert(redhttp_request_get_version(request) == NULL);
redhttp_request_free(request);

#test set_and_get_query_string
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_query_string(request, "ignore");
redhttp_request_set_query_string(request, "rat=white");
ck_assert_str_eq(redhttp_request_get_query_string(request), "rat=white");
redhttp_request_free(request);

#test set_and_get_null_query_string
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_query_string(request, "ignore");
redhttp_request_set_query_string(request, NULL);
ck_assert(redhttp_request_get_query_string(request) == NULL);
redhttp_request_free(request);

#test header_add_and_get
redhttp_request_t *request = redhttp_request_new();
redhttp_request_add_header(request, "key", "value");
ck_assert_str_eq(redhttp_request_get_header(request, "key"), "value");
redhttp_request_free(request);

#test header_count_empty
redhttp_request_t *request = redhttp_request_new();
ck_assert_int_eq(redhttp_request_count_headers(request), 0);
redhttp_request_free(request);

#test header_count
redhttp_request_t *request = redhttp_request_new();
redhttp_request_add_header(request, "key1", "value1");
redhttp_request_add_header(request, "key2", "value2");
ck_assert_int_eq(redhttp_request_count_headers(request), 2);
redhttp_request_free(request);

#test set_path_glob
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_path_glob(request, "myglob1");
redhttp_request_set_path_glob(request, "myglob2");
ck_assert_str_eq(redhttp_request_get_path_glob(request), "myglob2");
redhttp_request_free(request);

#test set_path_glob_null
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_path_glob(request, NULL);
ck_assert_msg(redhttp_request_get_path_glob(request) == NULL, "redhttp_request_get_path_glob() should be NULL");
redhttp_request_free(request);

#test set_path_glob_empty
redhttp_request_t *request = redhttp_request_new();
redhttp_request_set_path_glob(request, "");
ck_assert_msg(redhttp_request_get_path_glob(request) == NULL, "redhttp_request_get_path_glob() should be NULL");
redhttp_request_free(request);

#test parse_argument
redhttp_request_t *request = redhttp_request_new();
redhttp_request_parse_arguments(request, "key1=value1");
ck_assert_str_eq(redhttp_request_get_argument(request, "key1"), "value1");
redhttp_request_free(request);

#test get_argument_index
const char *key, *value;
redhttp_request_t *request = redhttp_request_new();
redhttp_request_parse_arguments(request, "key0=value0");
ck_assert_int_eq(redhttp_request_get_argument_index(request, 0, &key, &value), 1);
ck_assert_str_eq(key, "key0");
ck_assert_str_eq(value, "value0");
ck_assert_int_eq(redhttp_request_get_argument_index(request, 1, NULL, NULL), 0);
redhttp_request_free(request);

#test parse_invalid_argument
redhttp_request_t *request = redhttp_request_new();
redhttp_request_parse_arguments(request, "invalid&");
ck_assert_int_eq(redhttp_request_count_arguments(request), 0);
redhttp_request_free(request);

#test read_line_crlf
redhttp_request_t *request = redhttp_request_new();
char *line = NULL;
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_crlf.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
line = redhttp_request_read_line(request);
ck_assert_str_eq(line, "GET /foaf.rdf?format=xml HTTP/1.0");
free(line);
redhttp_request_free(request);

#test read_line_lf
redhttp_request_t *request = redhttp_request_new();
char *line = NULL;
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_lf.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
line = redhttp_request_read_line(request);
ck_assert_str_eq(line, "GET /foaf.rdf HTTP/1.0");
free(line);
redhttp_request_free(request);

#test read_line_empty
redhttp_request_t *request = redhttp_request_new();
char *line = NULL;
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen("/dev/zero", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
line = redhttp_request_read_line(request);
ck_assert_msg(line == NULL, "redhttp_request_read_line() should have returned null");
redhttp_request_free(request);

#test read_status_line
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_crlf.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read_status_line(request) == 0, "Failed to parse status line");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
ck_assert_str_eq(redhttp_request_get_url(request), "/foaf.rdf?format=xml");
ck_assert_str_eq(redhttp_request_get_version(request), "1.0");
ck_assert_str_eq(redhttp_request_get_query_string(request), "format=xml");
ck_assert_str_eq(redhttp_request_get_path(request), "/foaf.rdf");
ck_assert_str_eq(redhttp_request_get_argument(request, "format"), "xml");
redhttp_request_free(request);

#test read_status_line_empty
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen("/dev/zero", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read_status_line(request) == 400, "Parse error not noticed");
redhttp_request_free(request);

#test read_status_line_09
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_09.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read_status_line(request) == 0, "Failed to parse status line");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
ck_assert_str_eq(redhttp_request_get_url(request), "/foaf.rdf");
ck_assert_str_eq(redhttp_request_get_version(request), "0.9");
redhttp_request_free(request);

#test read_status_line_no_url
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_no_url.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read_status_line(request) == 400, "Parse error not noticed");
redhttp_request_free(request);

#test read_status_line_with_space
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_with_spaces.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read_status_line(request) == 0, "Failed to parse status line");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
ck_assert_str_eq(redhttp_request_get_url(request), "/hello world%20.txt");
ck_assert_str_eq(redhttp_request_get_version(request), "1.0");
ck_assert_msg(redhttp_request_get_query_string(request) == NULL, "query_string should be NULL");
ck_assert_str_eq(redhttp_request_get_path(request), "/hello world .txt");
redhttp_request_free(request);

#test read_request
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_crlf.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read(request) == 0, "Failed to parse request");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
ck_assert_str_eq(redhttp_request_get_url(request), "/foaf.rdf?format=xml");
ck_assert_str_eq(redhttp_request_get_version(request), "1.0");
ck_assert_str_eq(redhttp_request_get_query_string(request), "format=xml");
ck_assert_str_eq(redhttp_request_get_path(request), "/foaf.rdf");
redhttp_request_free(request);

#test read_request_09
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_09.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read(request) == 0, "Failed to read request");
ck_assert_str_eq(redhttp_request_get_method(request), "GET");
ck_assert_str_eq(redhttp_request_get_url(request), "/foaf.rdf");
ck_assert_str_eq(redhttp_request_get_version(request), "0.9");
redhttp_request_free(request);

#test read_request_post
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_post.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read(request) == 0, "Failed to parse request");
ck_assert_int_eq(redhttp_request_get_content_length(request), 23);
ck_assert_msg(strncmp(redhttp_request_get_content_buffer(request), "animal=rat&colour=white", 23)==0, "Content buffer should contain post data");
ck_assert_str_eq(redhttp_request_get_method(request), "POST");
ck_assert_str_eq(redhttp_request_get_url(request), "/buy");
ck_assert_str_eq(redhttp_request_get_version(request), "1.0");
ck_assert_str_eq(redhttp_request_get_argument(request, "animal"), "rat");
ck_assert_str_eq(redhttp_request_get_argument(request, "colour"), "white");
redhttp_request_free(request);

#test read_request_post_invalid
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_post_invalid.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read(request) == REDHTTP_BAD_REQUEST, "Invalid request deemed valid.");
redhttp_request_free(request);

#test read_request_post_truncated
redhttp_request_t *request = redhttp_request_new();
ck_assert_msg(request != NULL, "redhttp_request_new() returned null");
redhttp_request_set_socket(request, fopen(FIXTURE_DIR "http_request_post_truncated.txt", "rb"));
ck_assert_msg(redhttp_request_get_socket(request) != NULL, "fopen() returned null");
ck_assert_msg(redhttp_request_read(request) == REDHTTP_BAD_REQUEST, "Invalid request deemed valid.");
redhttp_request_free(request);

